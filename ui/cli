#!/usr/bin/env node
const doc = (`
Build, and optionally serve, an interface visualizing an artifact directory.

Usage:
  artisan-ui [serve] [CONF] [--port=PORT]
  artisan-ui build [CONF] [--dst=DST] [--include-data] [--include-deps]
  artisan-ui -h | --help

Options:
  --dst=DST       The path to which the site should be written
  --port=PORT     The port on which to serve [default: 1234]
  --include-data  <Not implemented>
  --include-deps  <Not implemented>

Note: \`build\` is not yet implemented.
`)

const fs = require('fs')
const path = require('path')

const { docopt } = require('docopt')
const express = require('express')
const isUrl = require('is-url')
const yaml = require('js-yaml')
const rollup = require('rollup')
const commonjsPlugin = require('rollup-plugin-commonjs')
const resolvePlugin = require('rollup-plugin-node-resolve')
const sucrasePlugin = require('rollup-plugin-sucrase')


//- Parse command-line arguments. ---------------------------------------------

const rawArgs = docopt(doc)
const args = {
  extPath: rawArgs['CONF'] ? path.resolve(rawArgs['CONF']) : null,
  dst: rawArgs['DST'],
  port: parseInt(rawArgs['--port']),
  includeData: rawArgs['--include-data'],
  includeDeps: rawArgs['--include-deps']
}


//- Define a self-updating extension object. ----------------------------------

const ext = {
  head: { scripts: [], styles: [], bindings: {} },
  body: 'window.Extension = { default: {} }',
  headTimestamp: 0,
  bodyTimestamp: 0
}

if (args.extPath)
  watchExt(args.extPath, ext)


//- Start a development server. -----------------------------------------------

serve(ext, args.port)


//- [Extension-watching definitions] ------------------------------------------

function watchExt(extPath, ext) {
  const coreBindings = {
    'react': 'React',
    'react-dom': 'ReactDOM',
    'numjs': 'nj'
  }

  const watcher = rollup.watch({
    input: extPath,
    external: id => (
      ext.head.bindings.hasOwnProperty(id) ||
      coreBindings.hasOwnProperty(id)
    ),
    output: {
      file: process.platform === 'win32' ? '\\\\.\\NUL' : '/dev/null',
      format: 'iife',
      name: 'Extension',
      globals: name => (
        ext.head.bindings.hasOwnProperty(name)
        ? ext.head.bindings[name]
        : coreBindings[name]
      )
    },
    plugins: [
      sucrasePlugin({
        transforms: ['jsx', 'typescript'],
        exclude: ['node_modules/**']
      }),
      commonjsPlugin(),
      resolvePlugin({
        extensions: ['.js', '.ts', '.tsx']
      })
    ],
    onwarn: (warning, propagate) => {
      if (warning.code !== 'THIS_IS_UNDEFINED')
        propagate(warning)
    }
  })

  watcher.on('event', async e => {
    switch (e.code) {
      case 'BUNDLE_START':
        // Update `ext.head`.
        const currHead = readExtHead(args.extPath)
        if (JSON.stringify(currHead) !== JSON.stringify(ext.head)) {
          ext.head = currHead
          ext.headTimestamp = Date.now()
        }
        break
      case 'BUNDLE_END':
        // Update `ext.body`.
        const globals = { ...coreBindings, ...ext.head.bindings }
        const bundle = await e.result.generate({
          output: { format: 'iife', name: 'Extension', globals },
          sourcemap: true
        })
        const { code, map } = bundle.output[0]
        ext.body = `${code}\n//# sourceMappingURL=${map.toUrl()}\n`
        ext.bodyTimestamp = Date.now()
        break
      case 'ERROR':
        // Update `ext.body`.
        ext.body = extBodyFromError(e.error)
        ext.bodyTimestamp = Date.now()
        break
      case 'FATAL':
        // Provide an explanation.
        console.error(fatalErrorMessage())
        break
    }
  })
}


function readExtHead(extPath) {
  const head = { scripts: [], styles: [], bindings: {} }
  const entrySrc = fs.readFileSync(extPath, 'utf8')
  const firstTokenComment = entrySrc.match(/^\s*\/\*((?:.|\n)*?)\*\//)
  if (firstTokenComment !== null) {
    try {
      const header = yaml.load(firstTokenComment[1])
      const resolve = x => isUrl(x) ? x : `/extension/deps/${x}`
      head.scripts = (header.scripts || []).map(resolve)
      head.styles = (header.styles || []).map(resolve)
      head.bindings = header.bindings || {}
    }
    catch (_) {}
  }
  return head
}


function extBodyFromError(error) {
  return (`
    window.Extension = {
      default: {
        views: [['**', () => (
          React.createElement('pre', { style: { color: "#800" } },
            React.createElement('code', {}, ${JSON.stringify(error.message)})
          )
        )]]
      }
    }
  `)
}


function fatalErrorMessage() {
  return (
    'Rollup (ArtisanUI\'s module bundler) encountered a fatal error.\n' +
    'This can happen during the initial build when there are\n' +
    'syntax errors in your extension. (See Rollup issue #1773.)'
  )
}


//- [Server definitions] ------------------------------------------------------

function serve(ext, port) {
  const app = express()

  // Core bundle and its dependencies
  const depPath = path.resolve(require.resolve('react') + '/../..')
  app.use('/artisan-ui/deps', express.static(depPath))
  app.use('/artisan-ui', express.static(__dirname))

  // User-defined extension
  app.use('/extension/deps', express.static(path.resolve('.')))
  app.get('/extension/index.js', (_, res) => res.send(ext.body))
  app.get('/extension/timestamps.json', (_, res) => (
    res.json({ head: ext.headTimestamp, body: ext.bodyTimestamp })
  ))

  // `index.html`
  app.get(['/', '/index.html'], (_, res) => {
    res.type('text/html')
    res.status(200)
    res.send(page(ext.head))
  })

  app.listen(port)
}


function page({ styles, scripts }) {
  return (`
    <!DOCTYPE html>
    <head>
      <meta charset="utf-8">

      <!-- Core styles -->
      <link rel="stylesheet" href="/artisan-ui/client/index.css">

      <!-- Extension styles -->
      ${styles.map(s => `<link rel="stylesheet" href="${s}">`).join('\n      ')}
    </head>

    <body>
      <!-- Root mount point -->
      <div id="__aui-root"></div>

      <!-- Core scripts -->
      <script src="/artisan-ui/deps/react/umd/react.development.js"></script>
      <script src="/artisan-ui/deps/react-dom/umd/react-dom.development.js"></script>
      <script src="/artisan-ui/deps/numjs/dist/numjs.min.js"></script>
      <script src="/artisan-ui/dist/index.js"></script>
      <script> ArtisanUI.render() </script>

      <!-- The extension script bundle and its dependencies -->
      ${scripts.map(s => `<script src="${s}"></script>`).join('\n      ')}
      <script src="/extension/index.js"></script>
      <script> ArtisanUI.render(); ArtisanUI.pollForUpdates() </script>
    </body>
  `)
}
